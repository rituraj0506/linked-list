Given the head of a singly linked list, reverse the list, and return the reversed list.
Example 1:
Input: head = [1,2,3,4,5]
Output: [5,4,3,2,1]

 ListNode* reverseList(ListNode* head) {
       ListNode*newhead=NULL;
        while(head!=NULL)
        {
            ListNode*next=head->next;
            head->next=newhead;
             newhead=head;
             head=next;
        }
        return newhead;
    }

The loop runs for the entire length of the linked list. Therefore, the time complexity of this code is O(n), 
where n is the number of nodes in the linked list.

Space Complexity:
The space complexity of the code is O(1), which is constant space. This is because the code uses a fixed number of extra variables (prev, next) 
regardless of the size of the linked list. 
