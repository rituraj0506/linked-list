You are given the heads of two sorted linked lists list1 and list2.
Merge the two lists in a one sorted list. The list should be made by splicing together the nodes of the first two lists.
Return the head of the merged linked list.

Example 1:
Input: list1 = [1,2,4], list2 = [1,3,4]
Output: [1,1,2,3,4,4]

 class Solution {
public:
    ListNode* mergeTwoLists(ListNode* l1, ListNode* l2) {
    ListNode*result=NULL;
    if(l1==NULL)
       return l2;
    if(l2==NULL)
      return l1;
     if(l1->val<=l2->val)
        {
         result=l1;
         result->next=mergeTwoLists(l1->next,l2);
        }
         else
        {
             result=l2;
         result->next=mergeTwoLists(l1,l2->next);
        }
        return result;
    }
};

In summary, the code has a time complexity of O(n + m) and a space complexity of O(n + m),
where n and m are the lengths of the two linked lists being merged.



